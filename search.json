[{"categories":null,"content":"oracl 使用 1 Oracle-server 安装 1.1 下载 linux 安装包 ==略……注意 32 位系统还是 64 位系统，选择对应位数的安装包== Oracle 下载地址：http://www.oracle.com/technetwork/indexes/downloads/index.html#database 下载完成后，移动到你觉得方便的位置，进行 unzip 解压： 默认会在当前目录下生成一个 database 的目录，解压在其中： 1.2 创建用户、用户组 root 用户下操作 1 2 3 4 5 6 # groupadd oinstall #创建用户组 # groupadd dba # useradd -g oinstall -G dba -m oracle #创建oracle用户并指定初始组oinstall,附加组dba # echo \"oracle\" \u003e passwd oracle --stdin #设置密码 # id oracle #查看用户相关信息 uid=1000(oracle) gid=1001(oinstall) 组=1001(oinstall),1002(dba) 1.3 创建相关目录 root 用户下操作 创建目录过程可简化： mkdir -pv /u01/app/oracle/{oracle/product/11.2.0/db_1,oraInventory,oradata,fast_recovery_area} 以下为单步执行 1 2 3 4 # mkdir -p /u01/app/oracle/oracle/product/11.2.0/db_1 #home目录，安装时指定，base目录 为/u01/app/oracle/oracle # mkdir -p /u01/app/oracle/oraInventory #配置目录，安装时指定 # mkdir -p /u01/app/oracle/oradata #数据目录，创建数据库时指定 # mkdir -p /u01/app/oracle/fast_recovery_area #数据恢复目录，创建数据库时指定 属主属组及权限修改 1 2 # chown -R oracle.oinstall /u01/app/oracle #修改属主属组 # chmod -R 755 /u01/app/oracle #修改权限 1.4 修改系统标识（可选） Oracle 默认不支持 centos 1 # cat /etc/redhat-release #没啥影响 1.5 RAM 与 SWAP 大小要求 官网说明：https://docs.oracle.com/cd/E11882_01/install.112/e47689/pre_install.htm#LADBI1085 内存要求 内存最小 1G，推荐 2G 或者更高； swap 大小要求 RAM Swap 1G 至 2G 1.5 倍 2G 至 16G 同 RAM 相等 16G 以上 16G 查看如下：free -h swap 大小扩展： 存储设备无论是分区还是 lvm，若无可再分配的分区、lvm，亦可生成所需大小的文件，再格式化为 swap 分区： 1 2 3 4 5 # dd if=/dev/zero of=/swapadd bs=1MB count=1024 #此处为1G # mkswap /swapadd # chmod 600 /swapadd # swapon /swapadd #使其生效 重启系统虚拟空间会消失，打开/etc/fstab文件，加入/swapadd swap swap defaults 0 0 如下为临时启用，fstab 文件挂载时，可以文件名，亦可 UUID 挂载： 1.6 安装依赖 具体的依赖包参考说明：https://docs.oracle.com/cd/E11882_01/install.112/e47689/pre_install.htm#LADBI1085 1 # yum -y install binutils* compat-libcap1* compat-libstdc++* gcc* gcc-c++* glibc* glibc-devel* ksh* libaio* libaio-devel* libgcc* libstdc++* libstdc++-devel* libXi* libXtst* make* sysstat* elfutils* unixODBC* 1.7 修改内核参数 官方参数设置指南：https://docs.oracle.com/cd/E11882_01/install.112/e47689/pre_install.htm#LADBI1187 以下示例中部分参数以 2G 内存值进行计算 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # vim /etc/sysctl.conf #修改内核参数，添加以下内容 ############################################################## net.ipv4.icmp_echo_ignore_broadcasts = 1 fs.file-max = 6815744 fs.aio-max-nr = 1048576 kernel.shmall = 2097152 kernel.shmmax = 1073741824 #2G*1024*1024*1024*0.5 kernel.shmmni = 4096 kernel.sem = 250 32000 100 128 net.ipv4.ip_local_port_range = 9000 65500 net.core.rmem_default = 262144 net.core.rmem_max= 4194304 net.core.wmem_default= 262144 net.core.wmem_max= 1048576 ############################################################## # sysctl -p #使配置生效 执行如下 参数详解： 参数 含义及计算方式 net.ipv4.icmp_echo_ignore_broadcasts = 1 允许 ping 操作； fs.file-max = 6815744 系统中可以同时打开的文件数目。其值相当于 6.5×1024×1024=6.5M； fs.aio-max-nr = 1048576 同时可以拥有的的异步 IO 请求数目，推荐值是：1048576，其实它等于 1024*1024 也就是 1024K 个； kernel.shmall = 2097152 共享内存的总量（所有内存大小，单位：页，1 页=4KB=4000 字节），2G 内存设置计算公式：2*1024*1024*1024/4000(页)；==此处安装所需最小值== kernel.shmmax = 1073741824 单个共享内存段的大小（单位：字节）限制，一般为共享内存总量的 50%~80%，2G 内存设置计算公式 2*1024*1024*1024*0.5； kernel.shmmni = 4096 表示单个共享内存段的最小值，一般为 4kB，即 4000bit； kernel.sem = 250 32000 100 128 表示设置的信号量，这 4 个参数内容大小固定；（每个信号对象集的最大信号对象数；系统范围内最大信号对象数；每个信号对象支持的最大操作数；系统范围内最大信号对象集数） net.ipv4.ip_local_port_range = 9000 65500 可使用的 IPv4 端口范围（临时端口范围至少从 9000 及以上开始）； net.core.rmem_default = 262144 表示接收套接字缓冲区大小的缺省值（以字节为单位）； net.core.rmem_max = 4194304 表示内核套接字接受缓存区的最大大小（以字节为单位）； net.core.wmem_default = 262144 表示内核套接字发送缓存区的缺省值（以字节为单位）； net.core.wmem_max = 1048576 表示内核套接字发送缓存区的最大大小（以字节为单位）； 1.8 修改资源限制 1 2 3 4 5 6 7 # vim /etc/security/limits.conf #修改资源限制，添加以下参数配置 oracle soft nproc 16384 #单个用户可用的最大进程数量(软限制，默认4096) oracle hard nproc 16384 #单个用户可用的最大进程数量(硬限制，默认4096) oracle soft nofile 65536 #用户进程可打开的文件描述符的最大数(软限制，默认1024) oracle hard nofile 65536 #用户进程可打开的文件描述符的最大数(硬限制，默认1024) oracle soft stack 10000 #软堆栈数(默认8192，单位KB) oracle hard stack 10000 #软堆栈数(默认8192，单位KB) 1.9 修改用户环境变量 1 2 3 4 5 6 7 8 9 10 # vim /home/oracle/.bash_profile #修改oracle用户家目录下的.bash_profile文","date":"2025-07-27","objectID":"/documentation/2bc07a1c-250727-170600/:0:0","tags":null,"title":"02-Oracle","uri":"/documentation/2bc07a1c-250727-170600/"},{"categories":null,"content":"学习在几分钟内创建一个 Hugo FixIt 站点。 标题 1 在本教程中，你将学会： 创建站点 添加内容 配置站点 发布站点 shortcode 视频嵌入测试： 先决条件 技巧 如果这是你第一次使用 Hugo，我们强烈建议你通过阅读这篇 入门文档 来更多地了解它。 在开始本教程之前，你必须： 你还必须熟悉使用命令行。 创建网站 提示 接下来的步骤将一步步指导你创建一个 Hugo 网站。 如果你已经熟悉 Hugo，可以跳过这些步骤，使用 [FixIt CLI][fixit-cli] 来快速创建一个网站。 命令 验证你是否安装了 Hugo 或更高版本。 1 hugo version 运行以下命令来创建一个带有 [FixIt][fixit] 主题的 Hugo 网站。下一节将对每个命令进行解释。 1 2 3 4 5 6 7 hugo new site my-blog cd my-blog git init git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt echo \"theme = 'FixIt'\" \u003e\u003e hugo.toml echo \"defaultContentLanguage = 'zh-cn'\" \u003e\u003e hugo.toml hugo server 通过终端中显示的 URL 查看你的站点。按 Ctrl + C 停止 Hugo 的开发服务器。 命令解释 在 my-blog 目录中为你的项目创建 [目录结构骨架][directory-structure]。 1 hugo new site my-blog 将当前目录更改为项目的根目录。 1 cd my-blog 在当前目录中初始化一个空的 Git 存储库。 1 git init 将 [FixIt][fixit] 主题作为 [Git 子模块][git-submodule] 添加到你的项目中的 themes 目录。 1 git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 在站点配置文件中添加一行，指定当前主题。 1 echo \"theme = 'FixIt'\" \u003e\u003e hugo.toml 在站点配置文件中添加一行，指定默认的内容语言。 1 echo \"defaultContentLanguage = 'zh-cn'\" \u003e\u003e hugo.toml 启动 Hugo 的开发服务器以查看站点。 1 hugo server 按 Ctrl + C 停止 Hugo 的开发服务器。 必要配置 为了能完整地使用 FixIt 主题的所有功能，务必在站点配置文件中添加以下内容。 1 2 3 4 5 6 [markup] _merge = \"shallow\" [outputs] _merge = \"shallow\" [taxonomies] _merge = \"shallow\" 以上配置表示继承 FixIt 主题的 markup，outputs 和 taxonomies 配置。 提示 在阅读完本文快速上手后，你可以参考 [配置篇][configuration] 来了解完整的主题配置。 添加内容 给你的网站添加新页面。 1 hugo new content posts/my-first-post.md Hugo 在 content/posts 目录中创建了该文件，使用编辑器打开文件。 1 2 3 4 5 6 --- title: 我的第一篇文章 date: 2024-03-01T17:10:04+08:00 draft: true # ... --- 请注意，[front matter][front-matter] 中的 draft 值为 true。默认情况下，Hugo 在你构建网站时不会发布草稿内容。详细了解 [草稿、未来和过期内容][draft-future-and-expired-content]。 在帖子正文中添加一些 [Markdown][commonmark]，但不要更改 draft 值。 1 2 3 4 5 6 7 8 --- title: 我的第一篇文章 date: 2024-03-01T17:10:04+08:00 draft: true # ... --- 博客（英语：Blog）是一种在线日记型式的个人网站，借由张帖子章、图片或视频来记录生活、抒发情感或分享信息。博客上的文章通常根据张贴时间，以倒序方式由新到旧排列。 保存文件，然后启动 Hugo 的开发服务器来查看站点。你可以运行以下任一命令来包含草稿内容。 1 2 3 hugo server --buildDrafts hugo server -D hugo server -D --disableFastRender 由于本主题使用了 Hugo 中的 .Store 来实现一些特性， 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面。 基本配置下的预览 当对新内容感到满意时，将 front matter 中的 draft 值更改为 false，然后保存文件。 1 2 3 4 5 6 7 8 9 10 11 12 13 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 发布网站 在此步骤中，你将发布你的网站，但不会 部署 它。 当你发布站点时，Hugo 在项目根目录的 public 目录中创建整个静态站点。这包括 HTML 文件以及图像、CSS 文件和 JavaScript 文件等资源。 当你发布网站时，你通常不希望包含 [草稿、未来或过期的内容][draft-future-and-expired-content]，命令很简单。 1 hugo 我们的大多数用户使用 CI/CD 工作流程部署他们的网站，通过推送 [^1] 到他们的 GitHub 或 GitLab 存储库会触发构建和部署。流行的提供商包括 [Vercel][vercel][^2]、[Netlify][netlify][^3]、[AWS Amplify][amplify]、[CloudCannon][cloudcannon]、[Cloudflare Pages][cf-pages]、 [GitHub pages][gh-pages] 和 [GitLab pages][gl-pages]。 要了解如何部署站点，请参阅 [托管和部署][hosting-and-deployment] 部分。 文档指南 我们强烈建议你花少量时间完整阅读 FixIt 主题的文档，以便你更好地了解如何使用它。 [安装篇][installation] [入门篇][getting-started] [内容管理][content-management] [进阶篇][advanced] ","date":"2025-07-22","objectID":"/posts/0870e5ba-250722-222009/:0:0","tags":null,"title":"second_post","uri":"/posts/0870e5ba-250722-222009/"},{"categories":null,"content":"50 字内摘要…… 1 一级标题 123 345 11 22 33 44 55 66 1 2 echo 112233 echo 445566 行内代码：echo aaabbbccc 1.1 二级标题 123 234 1.1.1 三级标题 123 234 有序列表： aaa bbb ccc 无需列表 aaa bbb ccc 待办事项 aaa bbb ccc ","date":"2025-07-22","objectID":"/posts/036ecf4d-250722-214654/:0:0","tags":null,"title":"模板测试01","uri":"/posts/036ecf4d-250722-214654/"},{"categories":null,"content":"50 字内摘要…… 1 一级标题 123 234 1.1 二级标题 123 234 1.1.1 三级标题 123 234 ","date":"2025-07-22","objectID":"/posts/d0fdf5a7-250722-214654/:0:0","tags":null,"title":"模板测试02","uri":"/posts/d0fdf5a7-250722-214654/"},{"categories":null,"content":"学习在几分钟内创建一个 Hugo FixIt 站点。 外部链接图标测试： https://www.baidu.com 行内代码测试: 高亮: ==echo== 行内代码: echo 222 标题 1 在本教程中，你将学会： 创建站点 添加内容 配置站点 发布站点 shortcode 视频嵌入测试： 1 echo \"This is bash\" 1 echo \"This is also bash\" 1 2 3 echo \"This is bash too\" echo $PATH docker ps -a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/bin/bash target_dir=\"/opt/lbex/\" download_url=\"https://github.com/flashcatcloud/ibex/releases/download/v1.0.0/ibex-1.0.0.tar.gz\" mkdir -p ${target_dir} \u0026\u0026 cd ${target_dir} wget ${download_url} tar zxvf ibex*.tar.gz mv ibex-*.tar.gz /tmp mysql -uroot -p1234 \u003c ./sql/ibex.sql # ibex-server启动 cat \u003c\u003c EOF \u003e ${target_dir}restart_ibex_server.sh #!/bin/bash for mod in \\$(ps -ef | grep \"${target_dir}ibex server\" | grep -v grep | awk '{print \\$2}') do echo \\$mod kill -9 \\$mod done nohup ${target_dir}ibex server \u0026\u003e\u003e ${target_dir}server.log \u0026 EOF chmod +x ${target_dir}restart_ibex_server.sh \u0026\u0026 sh ${target_dir}restart_ibex_server.sh # ibex-agent启动 sed -i 's/Host = \\\"\\$hostname\\\"/hostname = \\\"\\$ip\\\"/i' ./etc/agentd.conf cat \u003c\u003c EOF \u003e ${target_dir}restart_ibex_agentd.sh #!/bin/bash for mod in \\$(ps -ef | grep \"${target_dir}ibex agentd\" | grep -v grep | awk '{print \\$2}') do echo \\$mod kill -9 \\$mod done nohup ${target_dir}ibex agentd \u0026\u003e\u003e ${target_dir}agentd.log \u0026 EOF chmod +x ${target_dir}restart_ibex_agentd.sh \u0026\u0026 sh ${target_dir}restart_ibex_agentd.sh 头 1 头 3 头 3 11 12 13 21 22 23 31 32 33 先决条件 技巧 如果这是你第一次使用 Hugo，我们强烈建议你通过阅读这篇 入门文档 来更多地了解它。 在开始本教程之前，你必须： 你还必须熟悉使用命令行。 创建网站 提示 接下来的步骤将一步步指导你创建一个 Hugo 网站。 如果你已经熟悉 Hugo，可以跳过这些步骤，使用 [FixIt CLI][fixit-cli] 来快速创建一个网站。 命令 验证你是否安装了 Hugo 或更高版本。 1 hugo version 运行以下命令来创建一个带有 [FixIt][fixit] 主题的 Hugo 网站。下一节将对每个命令进行解释。 1 2 3 4 5 6 7 hugo new site my-blog cd my-blog git init git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt echo \"theme = 'FixIt'\" \u003e\u003e hugo.toml echo \"defaultContentLanguage = 'zh-cn'\" \u003e\u003e hugo.toml hugo server 通过终端中显示的 URL 查看你的站点。按 Ctrl + C 停止 Hugo 的开发服务器。 命令解释 在 my-blog 目录中为你的项目创建 [目录结构骨架][directory-structure]。 1 hugo new site my-blog 将当前目录更改为项目的根目录。 1 cd my-blog 在当前目录中初始化一个空的 Git 存储库。 1 git init 将 [FixIt][fixit] 主题作为 [Git 子模块][git-submodule] 添加到你的项目中的 themes 目录。 1 git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 在站点配置文件中添加一行，指定当前主题。 1 echo \"theme = 'FixIt'\" \u003e\u003e hugo.toml 在站点配置文件中添加一行，指定默认的内容语言。 1 echo \"defaultContentLanguage = 'zh-cn'\" \u003e\u003e hugo.toml 启动 Hugo 的开发服务器以查看站点。 1 hugo server 按 Ctrl + C 停止 Hugo 的开发服务器。 必要配置 为了能完整地使用 FixIt 主题的所有功能，务必在站点配置文件中添加以下内容。 1 2 3 4 5 6 [markup] _merge = \"shallow\" [outputs] _merge = \"shallow\" [taxonomies] _merge = \"shallow\" 以上配置表示继承 FixIt 主题的 markup，outputs 和 taxonomies 配置。 提示 在阅读完本文快速上手后，你可以参考 [配置篇][configuration] 来了解完整的主题配置。 添加内容 给你的网站添加新页面。 1 hugo new content posts/my-first-post.md Hugo 在 content/posts 目录中创建了该文件，使用编辑器打开文件。 1 2 3 4 5 6 --- title: 我的第一篇文章 date: 2024-03-01T17:10:04+08:00 draft: true # ... --- 请注意，[front matter][front-matter] 中的 draft 值为 true。默认情况下，Hugo 在你构建网站时不会发布草稿内容。详细了解 [草稿、未来和过期内容][draft-future-and-expired-content]。 在帖子正文中添加一些 [Markdown][commonmark]，但不要更改 draft 值。 1 2 3 4 5 6 7 8 --- title: 我的第一篇文章 date: 2024-03-01T17:10:04+08:00 draft: true # ... --- 博客（英语：Blog）是一种在线日记型式的个人网站，借由张帖子章、图片或视频来记录生活、抒发情感或分享信息。博客上的文章通常根据张贴时间，以倒序方式由新到旧排列。 保存文件，然后启动 Hugo 的开发服务器来查看站点。你可以运行以下任一命令来包含草稿内容。 1 2 3 hugo server --buildDrafts hugo server -D hugo server -D --disableFastRender 由于本主题使用了 Hugo 中的 .Store 来实现一些特性， 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面。 基本配置下的预览 当对新内容感到满意时，将 front matter 中的 draft 值更改为 false，然后保存文件。 1 2 3 4 5 6 7 8 9 10 11 12 13 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 echo 111 发布网站 在此步骤中，你将发布你的网站，但不会 部署 它。 当你发布站点时，Hugo 在项目根目录的 public 目录中创建整个静态站点。这包括 HTML 文件以及图像、CSS 文件和 JavaScript 文件等资源。 当你发布网站时，你通常不希望包含 [草稿、未来或过期的内容][draft-future-and-expired-content]，命令很简单。 1 hugo 我们的大多数用户使用 CI/CD 工作流程部署他们的网站，通过推送 [^1] 到他们的 GitHub 或 GitLab 存储库会触发构建和部署。流行的提供商包括 [Vercel][vercel][^2]、[Netlify][netlif","date":"2025-07-21","objectID":"/posts/8bd8d7a7-250721-200413/:0:0","tags":null,"title":"first_post","uri":"/posts/8bd8d7a7-250721-200413/"},{"categories":null,"content":"学习在几分钟内创建一个 Hugo FixIt 站点。 在本教程中，你将学会： 创建站点 添加内容 配置站点 发布站点 先决条件 技巧 如果这是你第一次使用 Hugo，我们强烈建议你通过阅读这篇 入门文档 来更多地了解它。 在开始本教程之前，你必须： 你还必须熟悉使用命令行。 创建网站 提示 接下来的步骤将一步步指导你创建一个 Hugo 网站。 如果你已经熟悉 Hugo，可以跳过这些步骤，使用 [FixIt CLI][fixit-cli] 来快速创建一个网站。 命令 验证你是否安装了 Hugo 或更高版本。 1 hugo version 运行以下命令来创建一个带有 [FixIt][fixit] 主题的 Hugo 网站。下一节将对每个命令进行解释。 1 2 3 4 5 6 7 hugo new site my-blog cd my-blog git init git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt echo \"theme = 'FixIt'\" \u003e\u003e hugo.toml echo \"defaultContentLanguage = 'zh-cn'\" \u003e\u003e hugo.toml hugo server 通过终端中显示的 URL 查看你的站点。按 Ctrl + C 停止 Hugo 的开发服务器。 命令解释 在 my-blog 目录中为你的项目创建 [目录结构骨架][directory-structure]。 1 hugo new site my-blog 将当前目录更改为项目的根目录。 1 cd my-blog 在当前目录中初始化一个空的 Git 存储库。 1 git init 将 [FixIt][fixit] 主题作为 [Git 子模块][git-submodule] 添加到你的项目中的 themes 目录。 1 git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 在站点配置文件中添加一行，指定当前主题。 1 echo \"theme = 'FixIt'\" \u003e\u003e hugo.toml 在站点配置文件中添加一行，指定默认的内容语言。 1 echo \"defaultContentLanguage = 'zh-cn'\" \u003e\u003e hugo.toml 启动 Hugo 的开发服务器以查看站点。 1 hugo server 按 Ctrl + C 停止 Hugo 的开发服务器。 必要配置 为了能完整地使用 FixIt 主题的所有功能，务必在站点配置文件中添加以下内容。 1 2 3 4 5 6 [markup] _merge = \"shallow\" [outputs] _merge = \"shallow\" [taxonomies] _merge = \"shallow\" 以上配置表示继承 FixIt 主题的 markup，outputs 和 taxonomies 配置。 提示 在阅读完本文快速上手后，你可以参考 [配置篇][configuration] 来了解完整的主题配置。 添加内容 给你的网站添加新页面。 1 hugo new content posts/my-first-post.md Hugo 在 content/posts 目录中创建了该文件，使用编辑器打开文件。 1 2 3 4 5 6 --- title: 我的第一篇文章 date: 2024-03-01T17:10:04+08:00 draft: true # ... --- 请注意，[front matter][front-matter] 中的 draft 值为 true。默认情况下，Hugo 在你构建网站时不会发布草稿内容。详细了解 [草稿、未来和过期内容][draft-future-and-expired-content]。 在帖子正文中添加一些 [Markdown][commonmark]，但不要更改 draft 值。 1 2 3 4 5 6 7 8 --- title: 我的第一篇文章 date: 2024-03-01T17:10:04+08:00 draft: true # ... --- 博客（英语：Blog）是一种在线日记型式的个人网站，借由张帖子章、图片或视频来记录生活、抒发情感或分享信息。博客上的文章通常根据张贴时间，以倒序方式由新到旧排列。 保存文件，然后启动 Hugo 的开发服务器来查看站点。你可以运行以下任一命令来包含草稿内容。 1 2 3 hugo server --buildDrafts hugo server -D hugo server -D --disableFastRender 由于本主题使用了 Hugo 中的 .Store 来实现一些特性， 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面。 基本配置下的预览 当对新内容感到满意时，将 front matter 中的 draft 值更改为 false，然后保存文件。 发布网站 在此步骤中，你将发布你的网站，但不会 部署 它。 当你发布站点时，Hugo 在项目根目录的 public 目录中创建整个静态站点。这包括 HTML 文件以及图像、CSS 文件和 JavaScript 文件等资源。 当你发布网站时，你通常不希望包含 [草稿、未来或过期的内容][draft-future-and-expired-content]，命令很简单。 1 hugo 我们的大多数用户使用 CI/CD 工作流程部署他们的网站，通过推送 [^1] 到他们的 GitHub 或 GitLab 存储库会触发构建和部署。流行的提供商包括 [Vercel][vercel][^2]、[Netlify][netlify][^3]、[AWS Amplify][amplify]、[CloudCannon][cloudcannon]、[Cloudflare Pages][cf-pages]、 [GitHub pages][gh-pages] 和 [GitLab pages][gl-pages]。 要了解如何部署站点，请参阅 [托管和部署][hosting-and-deployment] 部分。 文档指南 我们强烈建议你花少量时间完整阅读 FixIt 主题的文档，以便你更好地了解如何使用它。 [安装篇][installation] [入门篇][getting-started] [内容管理][content-management] [进阶篇][advanced] 嘿嘿 First_post ","date":"2025-07-21","objectID":"/posts/d21803a3-250721-200413/:0:0","tags":null,"title":"my-first-post","uri":"/posts/d21803a3-250721-200413/"},{"categories":null,"content":"仰泳的鱼's friends","date":"2025-07-17","objectID":"/friends/","tags":null,"title":"Index","uri":"/friends/"},{"categories":null,"content":" Base info nickname: Lruihao avatar: https://lruihao.cn/images/avatar.jpg url: https://lruihao.cn description: Lruihao’s Note Friendly Reminder Comment like this: 1 2 3 4 5 6 ```yaml - nickname: \u003cyour nickname\u003e avatar: \u003cyour avatar\u003e url: \u003cyour site link\u003e description: \u003cdescription of your site\u003e ``` Notice If you want to exchange link, please leave a comment as the above format. (personal non-commercial blogs / websites only)  Website failure, stop maintenance and improper content may be unlinked! Those websites that do not respect other people’s labor achievements, reprint without source, or malicious acts, please do not come to exchange. ","date":"2025-07-17","objectID":"/friends/:0:0","tags":null,"title":"Index","uri":"/friends/"}]